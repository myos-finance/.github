name: Build and publish image

description: Builds and pushes the Docker image.

inputs:
  gcloud-project:
    description: "GCP project to use for the build"
    required: true
  gcloud-credentials:
    description: "Credentials corresponding to the service account (json)"
    required: true
  build-args:
    description: "Build args for the docker image"
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: Set env vars
      shell: bash
      run: |
        echo "GCLOUD_PROJECT=${{ inputs.gcloud-project }}" >> $GITHUB_ENV
        echo "IMAGE_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
        echo "VERSION=$DOCKER_IMAGE_VERSION" >> $GITHUB_ENV

    - name: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: "${{ inputs.gcloud-credentials }}"

    - name: Setup Gcloud
      uses: google-github-actions/setup-gcloud@v0

    - name: Set up docker auth
      shell: bash
      run: |
        # Set up docker to authenticate
        # via gcloud command-line tool.
        gcloud auth configure-docker

    - name: Check if already an image built for the commit
      shell: bash
      run: |
        CHECK_IMAGE_TAG=$(gcloud container images list-tags gcr.io/${GCLOUD_PROJECT}/${IMAGE_NAME} | grep "$COMMIT_HASH_SHORT" | awk '{ print $2}' | sed 's/,.*//' | xargs || true)
        echo "CHECK_IMAGE_TAG=$CHECK_IMAGE_TAG" >> $GITHUB_ENV

    # Build the Docker image
    - name: Build
      shell: bash
      run: |
        if [[ "$BUILD_ARGS" == "" ]]; then
          docker build --build-arg APP_VERSION=$VERSION -t image .
        else
          docker_cmd="docker build $BUILD_ARGS -t image ."
          $docker_cmd
        fi
      env:
        BUILD_ARGS: "${{ inputs.build-args }}"

    # Push the Docker image to Google Container Registry
    - name: Publish
      shell: bash
      run: |
        IMAGE_ID=gcr.io/$GCLOUD_PROJECT/$IMAGE_NAME
        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION
        docker tag image $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:$VERSION
